Styling Components
- Make Your Apps Look Good

- Conditional and Dynamic Styles
- Two Most Used Approaches In Adding Styles to Components
-- Styled Components
--- 3rd party package
-- CSS Modules


Setting Dynamic Inline Styles
* use enteredValue.trim().length === 0 to check if input
  is blank

* when you want to set style based on condition, use
  ternary operator
** 
style={{ color: !isValid ? "red" : "black" }}


Setting CSS Classes Dynamically
* instead of using inline-styles, make css classes dynamic
- use template literal
*
<div className={`form-control ${!isValid ? "invalid" : ""}`}>


*make css styles scoped and not entirely global


Introducing Styled Components
- Styled Components
-- 3rd party package
-- applies styles directly to components
-- https://styled-components.com/
-- creates dynamically unique generated classes that will
   wrap the styles that you have indicated in it

styled.button``
- tag template literal
- a special kind of function
*
const Button = styled.button``;

*
styled.button`
  font: inherit;
  padding: 0.5rem 1.5rem;
  border: 1px solid #8b005d;
  color: white;
  background: #8b005d;
  box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);
  cursor: pointer;

  &:focus {
    outline: none;
  }

  &:hover,
  &:active {
    background: #ac0e77;
    border-color: #ac0e77;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.26);
  }
`
** if styles is being applied to the element itself, no
   need for selector
** if using pseudo-element, or anything else that the 
   element itself is involved, replace element selector 
   with "&"


Styled Components and Dynamic Props
* you can use props in styled-components
**
border: 1px solid ${(props) => (props.invalid ? "red" : "#ccc")};


Styled Components & Media Queries
* you can use normal media query syntax in styled-components


CSS Modules
- only supported by projects that acually supports it
- https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/
- rename css file to <name>.module.css
- import it with your desired name
*
import styles from "./Button.module.css";

*
const Button = (props) => {
  return (
    <button type={props.type} className={styles.button} onClick={props.onClick}>
      {props.children}
    </button>
  );
};

*css modules creates unique class names


Dynamic Styles with CSS Modules
* for classes with "-", use bracket notation:
  styles["form-control"]

* if multiple classes:
<div
  className={`${styles["form-control"]} ${!isValid && styles.invalid}`}
>